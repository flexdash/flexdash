import{n as t}from"./index.a483d689.js";import"./vue.1457ee3a.js";import"./vuetify.50e96a45.js";var e=["#4363d8","#3cb44b","#ffe119","#e6194b","#42d4f4","#911eb4","#f58231","#469990","#fabed4","#bfef45","#f032e6","#dcbeff","#9a6324","#fffac8","#800000","#aaffc3","#808000","#ffd8b1","#000075","#a9a9a9"],i=["blue","green","yellow","red","cyan","purple","orange","teal","pink","lime","magenta","lavender","brown","beige","maroon","mint","olive","apricot","navy","grey","from"];const a={};var s=t({name:"TimePlot",help:'Time-series chart with simple options.\nTimePlot uses the TimePlotRaw widget to render a time-series plot and generates\nthe uPlot options based on a set of relatively simple inputs. If you the full uPlot flexibility \nyou can use the output to see the options constructed as a starting point.\n\nBy default a single series is plotted without label (there\'s the title...). If any of the\narray inputs are specified the longest array determines the number of series.\n\nThe default color sequence is blue, green, yellow, red, cyan, purple, orange, teal, pink, lime,\nmagenta, lavender, brown, beige, maroon, mint, olive, apricot, navy, and grey from\nhttps://sashamaps.net/docs/resources/20-colors/\n\nThe data must be input in the form of "data points" where a data point is an array consisting\na unix timestamp (seconds since 1970-01-01) followed by a value per series. Null values are OK\nto designate missing data. Note: each an every data point must have one value per series.\n\nEach data message may be either an array of data points or a single data point. If an array is\nprovided then it replaces the entire dataset being shown. If a single point is provided\nit is appended to the current dataset and an old data point may be rotated out.\nNote that this "row-wise" structure gets transposed to the columnar structure expected by uPlot.\n',props:{data:{type:Array,default:void 0,validator:t=>Array.isArray(t)&&t.length,tip:"array with unix timestamp followed by a value per series"},labels:{type:Array,default:()=>[],tip:"array of labels for series"},colors:{type:Array,default:()=>[],tip:"array of colors for series, names or #rrggbb"},axis:{type:Array,default:()=>[],tip:"array to assign series to 'left' or 'right' axis"},width:{type:Array,default:()=>[],tip:"array of stroke widths for series, default is 2"},left_unit:{type:String,default:"",tip:"unit to label left axis"},right_unit:{type:String,default:"",tip:"unit to label right axis"},left_min:{type:Number,default:null,tip:"minimum for left axis"},left_max:{type:Number,default:null,tip:"maximum for left axis"},left_decimals:{type:Number,default:1,tip:"decimals on left axis"},right_min:{type:Number,default:null,tip:"minimum for right axis"},right_max:{type:Number,default:null,tip:"maximum for right axis"},right_decimals:{type:Number,default:1,tip:"decimals on right axis"}},output:{default:null,tip:"options passed into uPlot"},full_page:!0,computed:{options(){const t=Math.max(this.labels.length,this.colors.length,this.axis.length);let a=!1;const s=[{label:"time"}];for(let u=0;u<t;u++){const t=this.axis[u]&&this.axis[u].match(/^[rR]/);a||(a=t);const l=t?this.right_decimals:this.left_decimals,n=t?this.right_unit:this.left_unit,o={label:this.labels[u]||`series ${u+1}`,stroke:this.colors[u]?(r=this.colors[u],r.startsWith("#")?r:r in i?e[i[r]]:"#cccccc"):e[u%e.length],width:this.width[u]||2,scale:t?"R":"L",value:`v.toFixed(${l}) + "${n}"`};s.push(o)}var r;const l=[{},{scale:"L",values:`vv.map(v => v + "${this.left_unit}")`}];a&&l.push({scale:"R",values:`vv.map(v => v + "${this.right_unit}")`,side:1,grid:{show:!1}});const n={L:{}};null===this.left_min&&null===this.left_max||(null!==this.left_min&&null!==this.left_max&&(n.L.auto=!1),n.L.range={},null!==this.left_min&&(n.L.range.min={hard:this.left_min}),null!==this.left_max&&(n.L.range.max={hard:this.left_max})),null===this.right_min&&null===this.right_max||(n.R={range:{}},null!==this.right_min&&null!==this.right_max&&(n.R.auto=!1),null!==this.right_min&&(l[1].range.min={hard:this.right_min}),null!==this.right_max&&(l[1].range.max={hard:this.right_max}));const o={series:s,axes:l,scales:n};return console.log("Options for time-plot-raw:",o),this.$nextTick((()=>{this.$emit("send",o)})),o}}},(function(){var t=this,e=t.$createElement;return(t._self._c||e)("time-plot-raw",{attrs:{data:t.data,options:t.options}})}),[],!1,(function(t){for(let e in a)this[e]=a[e]}),null,null,null);s.options.__file="src/widgets/time-plot.vue";var r=s.exports;export default r;
